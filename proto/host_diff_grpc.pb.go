// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/host_diff.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HostService_UploadSnapshot_FullMethodName   = "/hostdiff.HostService/UploadSnapshot"
	HostService_GetHostHistory_FullMethodName   = "/hostdiff.HostService/GetHostHistory"
	HostService_CompareSnapshots_FullMethodName = "/hostdiff.HostService/CompareSnapshots"
)

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HostService defines the main gRPC service for the application.
type HostServiceClient interface {
	// Uploads a snapshot file. The client sends a stream of bytes.
	UploadSnapshot(ctx context.Context, in *UploadSnapshotRequest, opts ...grpc.CallOption) (*UploadSnapshotResponse, error)
	// Retrieves the history of snapshots for a given IP address.
	GetHostHistory(ctx context.Context, in *GetHostHistoryRequest, opts ...grpc.CallOption) (*GetHostHistoryResponse, error)
	// Compares two snapshots and returns a structured diff report.
	CompareSnapshots(ctx context.Context, in *CompareSnapshotsRequest, opts ...grpc.CallOption) (*CompareSnapshotsResponse, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) UploadSnapshot(ctx context.Context, in *UploadSnapshotRequest, opts ...grpc.CallOption) (*UploadSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadSnapshotResponse)
	err := c.cc.Invoke(ctx, HostService_UploadSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetHostHistory(ctx context.Context, in *GetHostHistoryRequest, opts ...grpc.CallOption) (*GetHostHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHostHistoryResponse)
	err := c.cc.Invoke(ctx, HostService_GetHostHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) CompareSnapshots(ctx context.Context, in *CompareSnapshotsRequest, opts ...grpc.CallOption) (*CompareSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompareSnapshotsResponse)
	err := c.cc.Invoke(ctx, HostService_CompareSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
// All implementations must embed UnimplementedHostServiceServer
// for forward compatibility.
//
// HostService defines the main gRPC service for the application.
type HostServiceServer interface {
	// Uploads a snapshot file. The client sends a stream of bytes.
	UploadSnapshot(context.Context, *UploadSnapshotRequest) (*UploadSnapshotResponse, error)
	// Retrieves the history of snapshots for a given IP address.
	GetHostHistory(context.Context, *GetHostHistoryRequest) (*GetHostHistoryResponse, error)
	// Compares two snapshots and returns a structured diff report.
	CompareSnapshots(context.Context, *CompareSnapshotsRequest) (*CompareSnapshotsResponse, error)
	mustEmbedUnimplementedHostServiceServer()
}

// UnimplementedHostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostServiceServer struct{}

func (UnimplementedHostServiceServer) UploadSnapshot(context.Context, *UploadSnapshotRequest) (*UploadSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSnapshot not implemented")
}
func (UnimplementedHostServiceServer) GetHostHistory(context.Context, *GetHostHistoryRequest) (*GetHostHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostHistory not implemented")
}
func (UnimplementedHostServiceServer) CompareSnapshots(context.Context, *CompareSnapshotsRequest) (*CompareSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareSnapshots not implemented")
}
func (UnimplementedHostServiceServer) mustEmbedUnimplementedHostServiceServer() {}
func (UnimplementedHostServiceServer) testEmbeddedByValue()                     {}

// UnsafeHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServiceServer will
// result in compilation errors.
type UnsafeHostServiceServer interface {
	mustEmbedUnimplementedHostServiceServer()
}

func RegisterHostServiceServer(s grpc.ServiceRegistrar, srv HostServiceServer) {
	// If the following call pancis, it indicates UnimplementedHostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HostService_ServiceDesc, srv)
}

func _HostService_UploadSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).UploadSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_UploadSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).UploadSnapshot(ctx, req.(*UploadSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetHostHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetHostHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GetHostHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetHostHistory(ctx, req.(*GetHostHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_CompareSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).CompareSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_CompareSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).CompareSnapshots(ctx, req.(*CompareSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostService_ServiceDesc is the grpc.ServiceDesc for HostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hostdiff.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadSnapshot",
			Handler:    _HostService_UploadSnapshot_Handler,
		},
		{
			MethodName: "GetHostHistory",
			Handler:    _HostService_GetHostHistory_Handler,
		},
		{
			MethodName: "CompareSnapshots",
			Handler:    _HostService_CompareSnapshots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/host_diff.proto",
}
