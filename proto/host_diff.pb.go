// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: proto/host_diff.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SnapshotInfo contains the metadata for a single snapshot.
type SnapshotInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IpAddress     string                 `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Timestamp     string                 `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotInfo) Reset() {
	*x = SnapshotInfo{}
	mi := &file_proto_host_diff_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotInfo) ProtoMessage() {}

func (x *SnapshotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotInfo.ProtoReflect.Descriptor instead.
func (*SnapshotInfo) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{0}
}

func (x *SnapshotInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SnapshotInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *SnapshotInfo) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// UploadSnapshot: Allows uploading a snapshot JSON file.
type UploadSnapshotRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw content of the JSON file.
	FileContent []byte `protobuf:"bytes,1,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
	// The original filename, used to extract metadata if needed.
	Filename      string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadSnapshotRequest) Reset() {
	*x = UploadSnapshotRequest{}
	mi := &file_proto_host_diff_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSnapshotRequest) ProtoMessage() {}

func (x *UploadSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSnapshotRequest.ProtoReflect.Descriptor instead.
func (*UploadSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{1}
}

func (x *UploadSnapshotRequest) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *UploadSnapshotRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type UploadSnapshotResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the newly created snapshot record.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The IP address associated with the snapshot.
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// The timestamp of the snapshot.
	Timestamp     string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadSnapshotResponse) Reset() {
	*x = UploadSnapshotResponse{}
	mi := &file_proto_host_diff_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSnapshotResponse) ProtoMessage() {}

func (x *UploadSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSnapshotResponse.ProtoReflect.Descriptor instead.
func (*UploadSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{2}
}

func (x *UploadSnapshotResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UploadSnapshotResponse) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *UploadSnapshotResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// GetHostHistory: Retrieves all snapshots for a specific host.
type GetHostHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IpAddress     string                 `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHostHistoryRequest) Reset() {
	*x = GetHostHistoryRequest{}
	mi := &file_proto_host_diff_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHostHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostHistoryRequest) ProtoMessage() {}

func (x *GetHostHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetHostHistoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{3}
}

func (x *GetHostHistoryRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type GetHostHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Snapshots     []*SnapshotInfo        `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHostHistoryResponse) Reset() {
	*x = GetHostHistoryResponse{}
	mi := &file_proto_host_diff_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHostHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostHistoryResponse) ProtoMessage() {}

func (x *GetHostHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetHostHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{4}
}

func (x *GetHostHistoryResponse) GetSnapshots() []*SnapshotInfo {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

// CompareSnapshots: Requests a comparison between two snapshots.
type CompareSnapshotsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SnapshotIdA   string                 `protobuf:"bytes,1,opt,name=snapshot_id_a,json=snapshotIdA,proto3" json:"snapshot_id_a,omitempty"`
	SnapshotIdB   string                 `protobuf:"bytes,2,opt,name=snapshot_id_b,json=snapshotIdB,proto3" json:"snapshot_id_b,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompareSnapshotsRequest) Reset() {
	*x = CompareSnapshotsRequest{}
	mi := &file_proto_host_diff_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompareSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareSnapshotsRequest) ProtoMessage() {}

func (x *CompareSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*CompareSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{5}
}

func (x *CompareSnapshotsRequest) GetSnapshotIdA() string {
	if x != nil {
		return x.SnapshotIdA
	}
	return ""
}

func (x *CompareSnapshotsRequest) GetSnapshotIdB() string {
	if x != nil {
		return x.SnapshotIdB
	}
	return ""
}

// DiffReport contains the structured differences between two snapshots.
type DiffReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This will be expanded with structured fields for ports, services, CVEs, etc.
	// For now, we'll use a simple text representation.
	Summary         string           `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	OsChanges       *OSChange        `protobuf:"bytes,2,opt,name=os_changes,json=osChanges,proto3" json:"os_changes,omitempty"`
	AddedPorts      []*PortChange    `protobuf:"bytes,3,rep,name=added_ports,json=addedPorts,proto3" json:"added_ports,omitempty"`
	RemovedPorts    []*PortChange    `protobuf:"bytes,4,rep,name=removed_ports,json=removedPorts,proto3" json:"removed_ports,omitempty"`
	ChangedPorts    []*PortChange    `protobuf:"bytes,5,rep,name=changed_ports,json=changedPorts,proto3" json:"changed_ports,omitempty"`
	AddedServices   []*ServiceChange `protobuf:"bytes,6,rep,name=added_services,json=addedServices,proto3" json:"added_services,omitempty"`
	RemovedServices []*ServiceChange `protobuf:"bytes,7,rep,name=removed_services,json=removedServices,proto3" json:"removed_services,omitempty"`
	ChangedServices []*ServiceChange `protobuf:"bytes,8,rep,name=changed_services,json=changedServices,proto3" json:"changed_services,omitempty"`
	AddedCves       []*CVEChange     `protobuf:"bytes,9,rep,name=added_cves,json=addedCves,proto3" json:"added_cves,omitempty"`
	RemovedCves     []*CVEChange     `protobuf:"bytes,10,rep,name=removed_cves,json=removedCves,proto3" json:"removed_cves,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DiffReport) Reset() {
	*x = DiffReport{}
	mi := &file_proto_host_diff_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiffReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffReport) ProtoMessage() {}

func (x *DiffReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffReport.ProtoReflect.Descriptor instead.
func (*DiffReport) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{6}
}

func (x *DiffReport) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *DiffReport) GetOsChanges() *OSChange {
	if x != nil {
		return x.OsChanges
	}
	return nil
}

func (x *DiffReport) GetAddedPorts() []*PortChange {
	if x != nil {
		return x.AddedPorts
	}
	return nil
}

func (x *DiffReport) GetRemovedPorts() []*PortChange {
	if x != nil {
		return x.RemovedPorts
	}
	return nil
}

func (x *DiffReport) GetChangedPorts() []*PortChange {
	if x != nil {
		return x.ChangedPorts
	}
	return nil
}

func (x *DiffReport) GetAddedServices() []*ServiceChange {
	if x != nil {
		return x.AddedServices
	}
	return nil
}

func (x *DiffReport) GetRemovedServices() []*ServiceChange {
	if x != nil {
		return x.RemovedServices
	}
	return nil
}

func (x *DiffReport) GetChangedServices() []*ServiceChange {
	if x != nil {
		return x.ChangedServices
	}
	return nil
}

func (x *DiffReport) GetAddedCves() []*CVEChange {
	if x != nil {
		return x.AddedCves
	}
	return nil
}

func (x *DiffReport) GetRemovedCves() []*CVEChange {
	if x != nil {
		return x.RemovedCves
	}
	return nil
}

type PortChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          int32                  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol      string                 `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	OldState      string                 `protobuf:"bytes,3,opt,name=old_state,json=oldState,proto3" json:"old_state,omitempty"`
	NewState      string                 `protobuf:"bytes,4,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
	OldService    string                 `protobuf:"bytes,5,opt,name=old_service,json=oldService,proto3" json:"old_service,omitempty"`
	NewService    string                 `protobuf:"bytes,6,opt,name=new_service,json=newService,proto3" json:"new_service,omitempty"`
	Changes       map[string]string      `protobuf:"bytes,7,rep,name=changes,proto3" json:"changes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortChange) Reset() {
	*x = PortChange{}
	mi := &file_proto_host_diff_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortChange) ProtoMessage() {}

func (x *PortChange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortChange.ProtoReflect.Descriptor instead.
func (*PortChange) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{7}
}

func (x *PortChange) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PortChange) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *PortChange) GetOldState() string {
	if x != nil {
		return x.OldState
	}
	return ""
}

func (x *PortChange) GetNewState() string {
	if x != nil {
		return x.NewState
	}
	return ""
}

func (x *PortChange) GetOldService() string {
	if x != nil {
		return x.OldService
	}
	return ""
}

func (x *PortChange) GetNewService() string {
	if x != nil {
		return x.NewService
	}
	return ""
}

func (x *PortChange) GetChanges() map[string]string {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ServiceChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OldVersion    string                 `protobuf:"bytes,2,opt,name=old_version,json=oldVersion,proto3" json:"old_version,omitempty"`
	NewVersion    string                 `protobuf:"bytes,3,opt,name=new_version,json=newVersion,proto3" json:"new_version,omitempty"`
	Changes       map[string]string      `protobuf:"bytes,4,rep,name=changes,proto3" json:"changes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceChange) Reset() {
	*x = ServiceChange{}
	mi := &file_proto_host_diff_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceChange) ProtoMessage() {}

func (x *ServiceChange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceChange.ProtoReflect.Descriptor instead.
func (*ServiceChange) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceChange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceChange) GetOldVersion() string {
	if x != nil {
		return x.OldVersion
	}
	return ""
}

func (x *ServiceChange) GetNewVersion() string {
	if x != nil {
		return x.NewVersion
	}
	return ""
}

func (x *ServiceChange) GetChanges() map[string]string {
	if x != nil {
		return x.Changes
	}
	return nil
}

type CVEChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CveId         string                 `protobuf:"bytes,1,opt,name=cve_id,json=cveId,proto3" json:"cve_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVEChange) Reset() {
	*x = CVEChange{}
	mi := &file_proto_host_diff_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVEChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVEChange) ProtoMessage() {}

func (x *CVEChange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVEChange.ProtoReflect.Descriptor instead.
func (*CVEChange) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{9}
}

func (x *CVEChange) GetCveId() string {
	if x != nil {
		return x.CveId
	}
	return ""
}

type OSChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oldname       string                 `protobuf:"bytes,1,opt,name=oldname,proto3" json:"oldname,omitempty"`
	Newname       string                 `protobuf:"bytes,2,opt,name=newname,proto3" json:"newname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OSChange) Reset() {
	*x = OSChange{}
	mi := &file_proto_host_diff_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OSChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSChange) ProtoMessage() {}

func (x *OSChange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSChange.ProtoReflect.Descriptor instead.
func (*OSChange) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{10}
}

func (x *OSChange) GetOldname() string {
	if x != nil {
		return x.Oldname
	}
	return ""
}

func (x *OSChange) GetNewname() string {
	if x != nil {
		return x.Newname
	}
	return ""
}

type CompareSnapshotsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        *DiffReport            `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompareSnapshotsResponse) Reset() {
	*x = CompareSnapshotsResponse{}
	mi := &file_proto_host_diff_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompareSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareSnapshotsResponse) ProtoMessage() {}

func (x *CompareSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_host_diff_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*CompareSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_proto_host_diff_proto_rawDescGZIP(), []int{11}
}

func (x *CompareSnapshotsResponse) GetReport() *DiffReport {
	if x != nil {
		return x.Report
	}
	return nil
}

var File_proto_host_diff_proto protoreflect.FileDescriptor

const file_proto_host_diff_proto_rawDesc = "" +
	"\n" +
	"\x15proto/host_diff.proto\x12\bhostdiff\"[\n" +
	"\fSnapshotInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x02 \x01(\tR\tipAddress\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\tR\ttimestamp\"V\n" +
	"\x15UploadSnapshotRequest\x12!\n" +
	"\ffile_content\x18\x01 \x01(\fR\vfileContent\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\"e\n" +
	"\x16UploadSnapshotResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x02 \x01(\tR\tipAddress\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\tR\ttimestamp\"6\n" +
	"\x15GetHostHistoryRequest\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x01 \x01(\tR\tipAddress\"N\n" +
	"\x16GetHostHistoryResponse\x124\n" +
	"\tsnapshots\x18\x01 \x03(\v2\x16.hostdiff.SnapshotInfoR\tsnapshots\"a\n" +
	"\x17CompareSnapshotsRequest\x12\"\n" +
	"\rsnapshot_id_a\x18\x01 \x01(\tR\vsnapshotIdA\x12\"\n" +
	"\rsnapshot_id_b\x18\x02 \x01(\tR\vsnapshotIdB\"\xba\x04\n" +
	"\n" +
	"DiffReport\x12\x18\n" +
	"\asummary\x18\x01 \x01(\tR\asummary\x121\n" +
	"\n" +
	"os_changes\x18\x02 \x01(\v2\x12.hostdiff.OSChangeR\tosChanges\x125\n" +
	"\vadded_ports\x18\x03 \x03(\v2\x14.hostdiff.PortChangeR\n" +
	"addedPorts\x129\n" +
	"\rremoved_ports\x18\x04 \x03(\v2\x14.hostdiff.PortChangeR\fremovedPorts\x129\n" +
	"\rchanged_ports\x18\x05 \x03(\v2\x14.hostdiff.PortChangeR\fchangedPorts\x12>\n" +
	"\x0eadded_services\x18\x06 \x03(\v2\x17.hostdiff.ServiceChangeR\raddedServices\x12B\n" +
	"\x10removed_services\x18\a \x03(\v2\x17.hostdiff.ServiceChangeR\x0fremovedServices\x12B\n" +
	"\x10changed_services\x18\b \x03(\v2\x17.hostdiff.ServiceChangeR\x0fchangedServices\x122\n" +
	"\n" +
	"added_cves\x18\t \x03(\v2\x13.hostdiff.CVEChangeR\taddedCves\x126\n" +
	"\fremoved_cves\x18\n" +
	" \x03(\v2\x13.hostdiff.CVEChangeR\vremovedCves\"\xb1\x02\n" +
	"\n" +
	"PortChange\x12\x12\n" +
	"\x04port\x18\x01 \x01(\x05R\x04port\x12\x1a\n" +
	"\bprotocol\x18\x02 \x01(\tR\bprotocol\x12\x1b\n" +
	"\told_state\x18\x03 \x01(\tR\boldState\x12\x1b\n" +
	"\tnew_state\x18\x04 \x01(\tR\bnewState\x12\x1f\n" +
	"\vold_service\x18\x05 \x01(\tR\n" +
	"oldService\x12\x1f\n" +
	"\vnew_service\x18\x06 \x01(\tR\n" +
	"newService\x12;\n" +
	"\achanges\x18\a \x03(\v2!.hostdiff.PortChange.ChangesEntryR\achanges\x1a:\n" +
	"\fChangesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe1\x01\n" +
	"\rServiceChange\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vold_version\x18\x02 \x01(\tR\n" +
	"oldVersion\x12\x1f\n" +
	"\vnew_version\x18\x03 \x01(\tR\n" +
	"newVersion\x12>\n" +
	"\achanges\x18\x04 \x03(\v2$.hostdiff.ServiceChange.ChangesEntryR\achanges\x1a:\n" +
	"\fChangesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\"\n" +
	"\tCVEChange\x12\x15\n" +
	"\x06cve_id\x18\x01 \x01(\tR\x05cveId\">\n" +
	"\bOSChange\x12\x18\n" +
	"\aoldname\x18\x01 \x01(\tR\aoldname\x12\x18\n" +
	"\anewname\x18\x02 \x01(\tR\anewname\"H\n" +
	"\x18CompareSnapshotsResponse\x12,\n" +
	"\x06report\x18\x01 \x01(\v2\x14.hostdiff.DiffReportR\x06report2\x92\x02\n" +
	"\vHostService\x12S\n" +
	"\x0eUploadSnapshot\x12\x1f.hostdiff.UploadSnapshotRequest\x1a .hostdiff.UploadSnapshotResponse\x12S\n" +
	"\x0eGetHostHistory\x12\x1f.hostdiff.GetHostHistoryRequest\x1a .hostdiff.GetHostHistoryResponse\x12Y\n" +
	"\x10CompareSnapshots\x12!.hostdiff.CompareSnapshotsRequest\x1a\".hostdiff.CompareSnapshotsResponseB.Z,github.com/justicecaban/host-diff-tool/protob\x06proto3"

var (
	file_proto_host_diff_proto_rawDescOnce sync.Once
	file_proto_host_diff_proto_rawDescData []byte
)

func file_proto_host_diff_proto_rawDescGZIP() []byte {
	file_proto_host_diff_proto_rawDescOnce.Do(func() {
		file_proto_host_diff_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_host_diff_proto_rawDesc), len(file_proto_host_diff_proto_rawDesc)))
	})
	return file_proto_host_diff_proto_rawDescData
}

var file_proto_host_diff_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_host_diff_proto_goTypes = []any{
	(*SnapshotInfo)(nil),             // 0: hostdiff.SnapshotInfo
	(*UploadSnapshotRequest)(nil),    // 1: hostdiff.UploadSnapshotRequest
	(*UploadSnapshotResponse)(nil),   // 2: hostdiff.UploadSnapshotResponse
	(*GetHostHistoryRequest)(nil),    // 3: hostdiff.GetHostHistoryRequest
	(*GetHostHistoryResponse)(nil),   // 4: hostdiff.GetHostHistoryResponse
	(*CompareSnapshotsRequest)(nil),  // 5: hostdiff.CompareSnapshotsRequest
	(*DiffReport)(nil),               // 6: hostdiff.DiffReport
	(*PortChange)(nil),               // 7: hostdiff.PortChange
	(*ServiceChange)(nil),            // 8: hostdiff.ServiceChange
	(*CVEChange)(nil),                // 9: hostdiff.CVEChange
	(*OSChange)(nil),                 // 10: hostdiff.OSChange
	(*CompareSnapshotsResponse)(nil), // 11: hostdiff.CompareSnapshotsResponse
	nil,                              // 12: hostdiff.PortChange.ChangesEntry
	nil,                              // 13: hostdiff.ServiceChange.ChangesEntry
}
var file_proto_host_diff_proto_depIdxs = []int32{
	0,  // 0: hostdiff.GetHostHistoryResponse.snapshots:type_name -> hostdiff.SnapshotInfo
	10, // 1: hostdiff.DiffReport.os_changes:type_name -> hostdiff.OSChange
	7,  // 2: hostdiff.DiffReport.added_ports:type_name -> hostdiff.PortChange
	7,  // 3: hostdiff.DiffReport.removed_ports:type_name -> hostdiff.PortChange
	7,  // 4: hostdiff.DiffReport.changed_ports:type_name -> hostdiff.PortChange
	8,  // 5: hostdiff.DiffReport.added_services:type_name -> hostdiff.ServiceChange
	8,  // 6: hostdiff.DiffReport.removed_services:type_name -> hostdiff.ServiceChange
	8,  // 7: hostdiff.DiffReport.changed_services:type_name -> hostdiff.ServiceChange
	9,  // 8: hostdiff.DiffReport.added_cves:type_name -> hostdiff.CVEChange
	9,  // 9: hostdiff.DiffReport.removed_cves:type_name -> hostdiff.CVEChange
	12, // 10: hostdiff.PortChange.changes:type_name -> hostdiff.PortChange.ChangesEntry
	13, // 11: hostdiff.ServiceChange.changes:type_name -> hostdiff.ServiceChange.ChangesEntry
	6,  // 12: hostdiff.CompareSnapshotsResponse.report:type_name -> hostdiff.DiffReport
	1,  // 13: hostdiff.HostService.UploadSnapshot:input_type -> hostdiff.UploadSnapshotRequest
	3,  // 14: hostdiff.HostService.GetHostHistory:input_type -> hostdiff.GetHostHistoryRequest
	5,  // 15: hostdiff.HostService.CompareSnapshots:input_type -> hostdiff.CompareSnapshotsRequest
	2,  // 16: hostdiff.HostService.UploadSnapshot:output_type -> hostdiff.UploadSnapshotResponse
	4,  // 17: hostdiff.HostService.GetHostHistory:output_type -> hostdiff.GetHostHistoryResponse
	11, // 18: hostdiff.HostService.CompareSnapshots:output_type -> hostdiff.CompareSnapshotsResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_host_diff_proto_init() }
func file_proto_host_diff_proto_init() {
	if File_proto_host_diff_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_host_diff_proto_rawDesc), len(file_proto_host_diff_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_host_diff_proto_goTypes,
		DependencyIndexes: file_proto_host_diff_proto_depIdxs,
		MessageInfos:      file_proto_host_diff_proto_msgTypes,
	}.Build()
	File_proto_host_diff_proto = out.File
	file_proto_host_diff_proto_goTypes = nil
	file_proto_host_diff_proto_depIdxs = nil
}
