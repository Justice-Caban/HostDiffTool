// source: proto/host_diff.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.hostdiff.CVEChange', null, global);
goog.exportSymbol('proto.hostdiff.CompareSnapshotsRequest', null, global);
goog.exportSymbol('proto.hostdiff.CompareSnapshotsResponse', null, global);
goog.exportSymbol('proto.hostdiff.DiffReport', null, global);
goog.exportSymbol('proto.hostdiff.GetHostHistoryRequest', null, global);
goog.exportSymbol('proto.hostdiff.GetHostHistoryResponse', null, global);
goog.exportSymbol('proto.hostdiff.OSChange', null, global);
goog.exportSymbol('proto.hostdiff.PortChange', null, global);
goog.exportSymbol('proto.hostdiff.ServiceChange', null, global);
goog.exportSymbol('proto.hostdiff.SnapshotInfo', null, global);
goog.exportSymbol('proto.hostdiff.UploadSnapshotRequest', null, global);
goog.exportSymbol('proto.hostdiff.UploadSnapshotResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.SnapshotInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hostdiff.SnapshotInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.SnapshotInfo.displayName = 'proto.hostdiff.SnapshotInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.UploadSnapshotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hostdiff.UploadSnapshotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.UploadSnapshotRequest.displayName = 'proto.hostdiff.UploadSnapshotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.UploadSnapshotResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hostdiff.UploadSnapshotResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.UploadSnapshotResponse.displayName = 'proto.hostdiff.UploadSnapshotResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.GetHostHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hostdiff.GetHostHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.GetHostHistoryRequest.displayName = 'proto.hostdiff.GetHostHistoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.GetHostHistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hostdiff.GetHostHistoryResponse.repeatedFields_, null);
};
goog.inherits(proto.hostdiff.GetHostHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.GetHostHistoryResponse.displayName = 'proto.hostdiff.GetHostHistoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.CompareSnapshotsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hostdiff.CompareSnapshotsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.CompareSnapshotsRequest.displayName = 'proto.hostdiff.CompareSnapshotsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.DiffReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hostdiff.DiffReport.repeatedFields_, null);
};
goog.inherits(proto.hostdiff.DiffReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.DiffReport.displayName = 'proto.hostdiff.DiffReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.PortChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hostdiff.PortChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.PortChange.displayName = 'proto.hostdiff.PortChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.ServiceChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hostdiff.ServiceChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.ServiceChange.displayName = 'proto.hostdiff.ServiceChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.CVEChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hostdiff.CVEChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.CVEChange.displayName = 'proto.hostdiff.CVEChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.OSChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hostdiff.OSChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.OSChange.displayName = 'proto.hostdiff.OSChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hostdiff.CompareSnapshotsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hostdiff.CompareSnapshotsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hostdiff.CompareSnapshotsResponse.displayName = 'proto.hostdiff.CompareSnapshotsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.SnapshotInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.SnapshotInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.SnapshotInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.SnapshotInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
ipAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
timestamp: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.SnapshotInfo}
 */
proto.hostdiff.SnapshotInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.SnapshotInfo;
  return proto.hostdiff.SnapshotInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.SnapshotInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.SnapshotInfo}
 */
proto.hostdiff.SnapshotInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.SnapshotInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.SnapshotInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.SnapshotInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.SnapshotInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIpAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.hostdiff.SnapshotInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.SnapshotInfo} returns this
 */
proto.hostdiff.SnapshotInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip_address = 2;
 * @return {string}
 */
proto.hostdiff.SnapshotInfo.prototype.getIpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.SnapshotInfo} returns this
 */
proto.hostdiff.SnapshotInfo.prototype.setIpAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.hostdiff.SnapshotInfo.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.SnapshotInfo} returns this
 */
proto.hostdiff.SnapshotInfo.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.UploadSnapshotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.UploadSnapshotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.UploadSnapshotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.UploadSnapshotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
fileContent: msg.getFileContent_asB64(),
filename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.UploadSnapshotRequest}
 */
proto.hostdiff.UploadSnapshotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.UploadSnapshotRequest;
  return proto.hostdiff.UploadSnapshotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.UploadSnapshotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.UploadSnapshotRequest}
 */
proto.hostdiff.UploadSnapshotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFileContent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.UploadSnapshotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.UploadSnapshotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.UploadSnapshotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.UploadSnapshotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes file_content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.hostdiff.UploadSnapshotRequest.prototype.getFileContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes file_content = 1;
 * This is a type-conversion wrapper around `getFileContent()`
 * @return {string}
 */
proto.hostdiff.UploadSnapshotRequest.prototype.getFileContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFileContent()));
};


/**
 * optional bytes file_content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFileContent()`
 * @return {!Uint8Array}
 */
proto.hostdiff.UploadSnapshotRequest.prototype.getFileContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFileContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.hostdiff.UploadSnapshotRequest} returns this
 */
proto.hostdiff.UploadSnapshotRequest.prototype.setFileContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string filename = 2;
 * @return {string}
 */
proto.hostdiff.UploadSnapshotRequest.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.UploadSnapshotRequest} returns this
 */
proto.hostdiff.UploadSnapshotRequest.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.UploadSnapshotResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.UploadSnapshotResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.UploadSnapshotResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.UploadSnapshotResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
ipAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
timestamp: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.UploadSnapshotResponse}
 */
proto.hostdiff.UploadSnapshotResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.UploadSnapshotResponse;
  return proto.hostdiff.UploadSnapshotResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.UploadSnapshotResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.UploadSnapshotResponse}
 */
proto.hostdiff.UploadSnapshotResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.UploadSnapshotResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.UploadSnapshotResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.UploadSnapshotResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.UploadSnapshotResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIpAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.hostdiff.UploadSnapshotResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.UploadSnapshotResponse} returns this
 */
proto.hostdiff.UploadSnapshotResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip_address = 2;
 * @return {string}
 */
proto.hostdiff.UploadSnapshotResponse.prototype.getIpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.UploadSnapshotResponse} returns this
 */
proto.hostdiff.UploadSnapshotResponse.prototype.setIpAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.hostdiff.UploadSnapshotResponse.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.UploadSnapshotResponse} returns this
 */
proto.hostdiff.UploadSnapshotResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.GetHostHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.GetHostHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.GetHostHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.GetHostHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
ipAddress: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.GetHostHistoryRequest}
 */
proto.hostdiff.GetHostHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.GetHostHistoryRequest;
  return proto.hostdiff.GetHostHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.GetHostHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.GetHostHistoryRequest}
 */
proto.hostdiff.GetHostHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.GetHostHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.GetHostHistoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.GetHostHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.GetHostHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ip_address = 1;
 * @return {string}
 */
proto.hostdiff.GetHostHistoryRequest.prototype.getIpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.GetHostHistoryRequest} returns this
 */
proto.hostdiff.GetHostHistoryRequest.prototype.setIpAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hostdiff.GetHostHistoryResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.GetHostHistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.GetHostHistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.GetHostHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.GetHostHistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
snapshotsList: jspb.Message.toObjectList(msg.getSnapshotsList(),
    proto.hostdiff.SnapshotInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.GetHostHistoryResponse}
 */
proto.hostdiff.GetHostHistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.GetHostHistoryResponse;
  return proto.hostdiff.GetHostHistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.GetHostHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.GetHostHistoryResponse}
 */
proto.hostdiff.GetHostHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hostdiff.SnapshotInfo;
      reader.readMessage(value,proto.hostdiff.SnapshotInfo.deserializeBinaryFromReader);
      msg.addSnapshots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.GetHostHistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.GetHostHistoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.GetHostHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.GetHostHistoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnapshotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hostdiff.SnapshotInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SnapshotInfo snapshots = 1;
 * @return {!Array<!proto.hostdiff.SnapshotInfo>}
 */
proto.hostdiff.GetHostHistoryResponse.prototype.getSnapshotsList = function() {
  return /** @type{!Array<!proto.hostdiff.SnapshotInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hostdiff.SnapshotInfo, 1));
};


/**
 * @param {!Array<!proto.hostdiff.SnapshotInfo>} value
 * @return {!proto.hostdiff.GetHostHistoryResponse} returns this
*/
proto.hostdiff.GetHostHistoryResponse.prototype.setSnapshotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hostdiff.SnapshotInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hostdiff.SnapshotInfo}
 */
proto.hostdiff.GetHostHistoryResponse.prototype.addSnapshots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hostdiff.SnapshotInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hostdiff.GetHostHistoryResponse} returns this
 */
proto.hostdiff.GetHostHistoryResponse.prototype.clearSnapshotsList = function() {
  return this.setSnapshotsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.CompareSnapshotsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.CompareSnapshotsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.CompareSnapshotsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.CompareSnapshotsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
snapshotIdA: jspb.Message.getFieldWithDefault(msg, 1, ""),
snapshotIdB: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.CompareSnapshotsRequest}
 */
proto.hostdiff.CompareSnapshotsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.CompareSnapshotsRequest;
  return proto.hostdiff.CompareSnapshotsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.CompareSnapshotsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.CompareSnapshotsRequest}
 */
proto.hostdiff.CompareSnapshotsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSnapshotIdA(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSnapshotIdB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.CompareSnapshotsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.CompareSnapshotsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.CompareSnapshotsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.CompareSnapshotsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnapshotIdA();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSnapshotIdB();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string snapshot_id_a = 1;
 * @return {string}
 */
proto.hostdiff.CompareSnapshotsRequest.prototype.getSnapshotIdA = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.CompareSnapshotsRequest} returns this
 */
proto.hostdiff.CompareSnapshotsRequest.prototype.setSnapshotIdA = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string snapshot_id_b = 2;
 * @return {string}
 */
proto.hostdiff.CompareSnapshotsRequest.prototype.getSnapshotIdB = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.CompareSnapshotsRequest} returns this
 */
proto.hostdiff.CompareSnapshotsRequest.prototype.setSnapshotIdB = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hostdiff.DiffReport.repeatedFields_ = [3,4,5,6,7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.DiffReport.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.DiffReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.DiffReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.DiffReport.toObject = function(includeInstance, msg) {
  var f, obj = {
summary: jspb.Message.getFieldWithDefault(msg, 1, ""),
osChanges: (f = msg.getOsChanges()) && proto.hostdiff.OSChange.toObject(includeInstance, f),
addedPortsList: jspb.Message.toObjectList(msg.getAddedPortsList(),
    proto.hostdiff.PortChange.toObject, includeInstance),
removedPortsList: jspb.Message.toObjectList(msg.getRemovedPortsList(),
    proto.hostdiff.PortChange.toObject, includeInstance),
changedPortsList: jspb.Message.toObjectList(msg.getChangedPortsList(),
    proto.hostdiff.PortChange.toObject, includeInstance),
addedServicesList: jspb.Message.toObjectList(msg.getAddedServicesList(),
    proto.hostdiff.ServiceChange.toObject, includeInstance),
removedServicesList: jspb.Message.toObjectList(msg.getRemovedServicesList(),
    proto.hostdiff.ServiceChange.toObject, includeInstance),
changedServicesList: jspb.Message.toObjectList(msg.getChangedServicesList(),
    proto.hostdiff.ServiceChange.toObject, includeInstance),
addedCvesList: jspb.Message.toObjectList(msg.getAddedCvesList(),
    proto.hostdiff.CVEChange.toObject, includeInstance),
removedCvesList: jspb.Message.toObjectList(msg.getRemovedCvesList(),
    proto.hostdiff.CVEChange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.DiffReport}
 */
proto.hostdiff.DiffReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.DiffReport;
  return proto.hostdiff.DiffReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.DiffReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.DiffReport}
 */
proto.hostdiff.DiffReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    case 2:
      var value = new proto.hostdiff.OSChange;
      reader.readMessage(value,proto.hostdiff.OSChange.deserializeBinaryFromReader);
      msg.setOsChanges(value);
      break;
    case 3:
      var value = new proto.hostdiff.PortChange;
      reader.readMessage(value,proto.hostdiff.PortChange.deserializeBinaryFromReader);
      msg.addAddedPorts(value);
      break;
    case 4:
      var value = new proto.hostdiff.PortChange;
      reader.readMessage(value,proto.hostdiff.PortChange.deserializeBinaryFromReader);
      msg.addRemovedPorts(value);
      break;
    case 5:
      var value = new proto.hostdiff.PortChange;
      reader.readMessage(value,proto.hostdiff.PortChange.deserializeBinaryFromReader);
      msg.addChangedPorts(value);
      break;
    case 6:
      var value = new proto.hostdiff.ServiceChange;
      reader.readMessage(value,proto.hostdiff.ServiceChange.deserializeBinaryFromReader);
      msg.addAddedServices(value);
      break;
    case 7:
      var value = new proto.hostdiff.ServiceChange;
      reader.readMessage(value,proto.hostdiff.ServiceChange.deserializeBinaryFromReader);
      msg.addRemovedServices(value);
      break;
    case 8:
      var value = new proto.hostdiff.ServiceChange;
      reader.readMessage(value,proto.hostdiff.ServiceChange.deserializeBinaryFromReader);
      msg.addChangedServices(value);
      break;
    case 9:
      var value = new proto.hostdiff.CVEChange;
      reader.readMessage(value,proto.hostdiff.CVEChange.deserializeBinaryFromReader);
      msg.addAddedCves(value);
      break;
    case 10:
      var value = new proto.hostdiff.CVEChange;
      reader.readMessage(value,proto.hostdiff.CVEChange.deserializeBinaryFromReader);
      msg.addRemovedCves(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.DiffReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.DiffReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.DiffReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.DiffReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOsChanges();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hostdiff.OSChange.serializeBinaryToWriter
    );
  }
  f = message.getAddedPortsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.hostdiff.PortChange.serializeBinaryToWriter
    );
  }
  f = message.getRemovedPortsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.hostdiff.PortChange.serializeBinaryToWriter
    );
  }
  f = message.getChangedPortsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.hostdiff.PortChange.serializeBinaryToWriter
    );
  }
  f = message.getAddedServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.hostdiff.ServiceChange.serializeBinaryToWriter
    );
  }
  f = message.getRemovedServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.hostdiff.ServiceChange.serializeBinaryToWriter
    );
  }
  f = message.getChangedServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.hostdiff.ServiceChange.serializeBinaryToWriter
    );
  }
  f = message.getAddedCvesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.hostdiff.CVEChange.serializeBinaryToWriter
    );
  }
  f = message.getRemovedCvesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.hostdiff.CVEChange.serializeBinaryToWriter
    );
  }
};


/**
 * optional string summary = 1;
 * @return {string}
 */
proto.hostdiff.DiffReport.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.DiffReport} returns this
 */
proto.hostdiff.DiffReport.prototype.setSummary = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OSChange os_changes = 2;
 * @return {?proto.hostdiff.OSChange}
 */
proto.hostdiff.DiffReport.prototype.getOsChanges = function() {
  return /** @type{?proto.hostdiff.OSChange} */ (
    jspb.Message.getWrapperField(this, proto.hostdiff.OSChange, 2));
};


/**
 * @param {?proto.hostdiff.OSChange|undefined} value
 * @return {!proto.hostdiff.DiffReport} returns this
*/
proto.hostdiff.DiffReport.prototype.setOsChanges = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hostdiff.DiffReport} returns this
 */
proto.hostdiff.DiffReport.prototype.clearOsChanges = function() {
  return this.setOsChanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hostdiff.DiffReport.prototype.hasOsChanges = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PortChange added_ports = 3;
 * @return {!Array<!proto.hostdiff.PortChange>}
 */
proto.hostdiff.DiffReport.prototype.getAddedPortsList = function() {
  return /** @type{!Array<!proto.hostdiff.PortChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hostdiff.PortChange, 3));
};


/**
 * @param {!Array<!proto.hostdiff.PortChange>} value
 * @return {!proto.hostdiff.DiffReport} returns this
*/
proto.hostdiff.DiffReport.prototype.setAddedPortsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.hostdiff.PortChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hostdiff.PortChange}
 */
proto.hostdiff.DiffReport.prototype.addAddedPorts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.hostdiff.PortChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hostdiff.DiffReport} returns this
 */
proto.hostdiff.DiffReport.prototype.clearAddedPortsList = function() {
  return this.setAddedPortsList([]);
};


/**
 * repeated PortChange removed_ports = 4;
 * @return {!Array<!proto.hostdiff.PortChange>}
 */
proto.hostdiff.DiffReport.prototype.getRemovedPortsList = function() {
  return /** @type{!Array<!proto.hostdiff.PortChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hostdiff.PortChange, 4));
};


/**
 * @param {!Array<!proto.hostdiff.PortChange>} value
 * @return {!proto.hostdiff.DiffReport} returns this
*/
proto.hostdiff.DiffReport.prototype.setRemovedPortsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.hostdiff.PortChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hostdiff.PortChange}
 */
proto.hostdiff.DiffReport.prototype.addRemovedPorts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.hostdiff.PortChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hostdiff.DiffReport} returns this
 */
proto.hostdiff.DiffReport.prototype.clearRemovedPortsList = function() {
  return this.setRemovedPortsList([]);
};


/**
 * repeated PortChange changed_ports = 5;
 * @return {!Array<!proto.hostdiff.PortChange>}
 */
proto.hostdiff.DiffReport.prototype.getChangedPortsList = function() {
  return /** @type{!Array<!proto.hostdiff.PortChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hostdiff.PortChange, 5));
};


/**
 * @param {!Array<!proto.hostdiff.PortChange>} value
 * @return {!proto.hostdiff.DiffReport} returns this
*/
proto.hostdiff.DiffReport.prototype.setChangedPortsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.hostdiff.PortChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hostdiff.PortChange}
 */
proto.hostdiff.DiffReport.prototype.addChangedPorts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.hostdiff.PortChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hostdiff.DiffReport} returns this
 */
proto.hostdiff.DiffReport.prototype.clearChangedPortsList = function() {
  return this.setChangedPortsList([]);
};


/**
 * repeated ServiceChange added_services = 6;
 * @return {!Array<!proto.hostdiff.ServiceChange>}
 */
proto.hostdiff.DiffReport.prototype.getAddedServicesList = function() {
  return /** @type{!Array<!proto.hostdiff.ServiceChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hostdiff.ServiceChange, 6));
};


/**
 * @param {!Array<!proto.hostdiff.ServiceChange>} value
 * @return {!proto.hostdiff.DiffReport} returns this
*/
proto.hostdiff.DiffReport.prototype.setAddedServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.hostdiff.ServiceChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hostdiff.ServiceChange}
 */
proto.hostdiff.DiffReport.prototype.addAddedServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.hostdiff.ServiceChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hostdiff.DiffReport} returns this
 */
proto.hostdiff.DiffReport.prototype.clearAddedServicesList = function() {
  return this.setAddedServicesList([]);
};


/**
 * repeated ServiceChange removed_services = 7;
 * @return {!Array<!proto.hostdiff.ServiceChange>}
 */
proto.hostdiff.DiffReport.prototype.getRemovedServicesList = function() {
  return /** @type{!Array<!proto.hostdiff.ServiceChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hostdiff.ServiceChange, 7));
};


/**
 * @param {!Array<!proto.hostdiff.ServiceChange>} value
 * @return {!proto.hostdiff.DiffReport} returns this
*/
proto.hostdiff.DiffReport.prototype.setRemovedServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.hostdiff.ServiceChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hostdiff.ServiceChange}
 */
proto.hostdiff.DiffReport.prototype.addRemovedServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.hostdiff.ServiceChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hostdiff.DiffReport} returns this
 */
proto.hostdiff.DiffReport.prototype.clearRemovedServicesList = function() {
  return this.setRemovedServicesList([]);
};


/**
 * repeated ServiceChange changed_services = 8;
 * @return {!Array<!proto.hostdiff.ServiceChange>}
 */
proto.hostdiff.DiffReport.prototype.getChangedServicesList = function() {
  return /** @type{!Array<!proto.hostdiff.ServiceChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hostdiff.ServiceChange, 8));
};


/**
 * @param {!Array<!proto.hostdiff.ServiceChange>} value
 * @return {!proto.hostdiff.DiffReport} returns this
*/
proto.hostdiff.DiffReport.prototype.setChangedServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.hostdiff.ServiceChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hostdiff.ServiceChange}
 */
proto.hostdiff.DiffReport.prototype.addChangedServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.hostdiff.ServiceChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hostdiff.DiffReport} returns this
 */
proto.hostdiff.DiffReport.prototype.clearChangedServicesList = function() {
  return this.setChangedServicesList([]);
};


/**
 * repeated CVEChange added_cves = 9;
 * @return {!Array<!proto.hostdiff.CVEChange>}
 */
proto.hostdiff.DiffReport.prototype.getAddedCvesList = function() {
  return /** @type{!Array<!proto.hostdiff.CVEChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hostdiff.CVEChange, 9));
};


/**
 * @param {!Array<!proto.hostdiff.CVEChange>} value
 * @return {!proto.hostdiff.DiffReport} returns this
*/
proto.hostdiff.DiffReport.prototype.setAddedCvesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.hostdiff.CVEChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hostdiff.CVEChange}
 */
proto.hostdiff.DiffReport.prototype.addAddedCves = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.hostdiff.CVEChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hostdiff.DiffReport} returns this
 */
proto.hostdiff.DiffReport.prototype.clearAddedCvesList = function() {
  return this.setAddedCvesList([]);
};


/**
 * repeated CVEChange removed_cves = 10;
 * @return {!Array<!proto.hostdiff.CVEChange>}
 */
proto.hostdiff.DiffReport.prototype.getRemovedCvesList = function() {
  return /** @type{!Array<!proto.hostdiff.CVEChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hostdiff.CVEChange, 10));
};


/**
 * @param {!Array<!proto.hostdiff.CVEChange>} value
 * @return {!proto.hostdiff.DiffReport} returns this
*/
proto.hostdiff.DiffReport.prototype.setRemovedCvesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.hostdiff.CVEChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hostdiff.CVEChange}
 */
proto.hostdiff.DiffReport.prototype.addRemovedCves = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.hostdiff.CVEChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hostdiff.DiffReport} returns this
 */
proto.hostdiff.DiffReport.prototype.clearRemovedCvesList = function() {
  return this.setRemovedCvesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.PortChange.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.PortChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.PortChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.PortChange.toObject = function(includeInstance, msg) {
  var f, obj = {
port: jspb.Message.getFieldWithDefault(msg, 1, 0),
protocol: jspb.Message.getFieldWithDefault(msg, 2, ""),
oldState: jspb.Message.getFieldWithDefault(msg, 3, ""),
newState: jspb.Message.getFieldWithDefault(msg, 4, ""),
oldService: jspb.Message.getFieldWithDefault(msg, 5, ""),
newService: jspb.Message.getFieldWithDefault(msg, 6, ""),
changesMap: (f = msg.getChangesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.PortChange}
 */
proto.hostdiff.PortChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.PortChange;
  return proto.hostdiff.PortChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.PortChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.PortChange}
 */
proto.hostdiff.PortChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewState(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldService(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewService(value);
      break;
    case 7:
      var value = msg.getChangesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.PortChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.PortChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.PortChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.PortChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOldState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNewState();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOldService();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNewService();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getChangesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional int32 port = 1;
 * @return {number}
 */
proto.hostdiff.PortChange.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hostdiff.PortChange} returns this
 */
proto.hostdiff.PortChange.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string protocol = 2;
 * @return {string}
 */
proto.hostdiff.PortChange.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.PortChange} returns this
 */
proto.hostdiff.PortChange.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string old_state = 3;
 * @return {string}
 */
proto.hostdiff.PortChange.prototype.getOldState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.PortChange} returns this
 */
proto.hostdiff.PortChange.prototype.setOldState = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string new_state = 4;
 * @return {string}
 */
proto.hostdiff.PortChange.prototype.getNewState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.PortChange} returns this
 */
proto.hostdiff.PortChange.prototype.setNewState = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string old_service = 5;
 * @return {string}
 */
proto.hostdiff.PortChange.prototype.getOldService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.PortChange} returns this
 */
proto.hostdiff.PortChange.prototype.setOldService = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string new_service = 6;
 * @return {string}
 */
proto.hostdiff.PortChange.prototype.getNewService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.PortChange} returns this
 */
proto.hostdiff.PortChange.prototype.setNewService = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, string> changes = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.hostdiff.PortChange.prototype.getChangesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.hostdiff.PortChange} returns this
 */
proto.hostdiff.PortChange.prototype.clearChangesMap = function() {
  this.getChangesMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.ServiceChange.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.ServiceChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.ServiceChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.ServiceChange.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
oldVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
newVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
changesMap: (f = msg.getChangesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.ServiceChange}
 */
proto.hostdiff.ServiceChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.ServiceChange;
  return proto.hostdiff.ServiceChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.ServiceChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.ServiceChange}
 */
proto.hostdiff.ServiceChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewVersion(value);
      break;
    case 4:
      var value = msg.getChangesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.ServiceChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.ServiceChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.ServiceChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.ServiceChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOldVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNewVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChangesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.hostdiff.ServiceChange.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.ServiceChange} returns this
 */
proto.hostdiff.ServiceChange.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string old_version = 2;
 * @return {string}
 */
proto.hostdiff.ServiceChange.prototype.getOldVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.ServiceChange} returns this
 */
proto.hostdiff.ServiceChange.prototype.setOldVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string new_version = 3;
 * @return {string}
 */
proto.hostdiff.ServiceChange.prototype.getNewVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.ServiceChange} returns this
 */
proto.hostdiff.ServiceChange.prototype.setNewVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, string> changes = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.hostdiff.ServiceChange.prototype.getChangesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.hostdiff.ServiceChange} returns this
 */
proto.hostdiff.ServiceChange.prototype.clearChangesMap = function() {
  this.getChangesMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.CVEChange.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.CVEChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.CVEChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.CVEChange.toObject = function(includeInstance, msg) {
  var f, obj = {
cveId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.CVEChange}
 */
proto.hostdiff.CVEChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.CVEChange;
  return proto.hostdiff.CVEChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.CVEChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.CVEChange}
 */
proto.hostdiff.CVEChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCveId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.CVEChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.CVEChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.CVEChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.CVEChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCveId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cve_id = 1;
 * @return {string}
 */
proto.hostdiff.CVEChange.prototype.getCveId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.CVEChange} returns this
 */
proto.hostdiff.CVEChange.prototype.setCveId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.OSChange.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.OSChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.OSChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.OSChange.toObject = function(includeInstance, msg) {
  var f, obj = {
oldname: jspb.Message.getFieldWithDefault(msg, 1, ""),
newname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.OSChange}
 */
proto.hostdiff.OSChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.OSChange;
  return proto.hostdiff.OSChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.OSChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.OSChange}
 */
proto.hostdiff.OSChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.OSChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.OSChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.OSChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.OSChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOldname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string oldname = 1;
 * @return {string}
 */
proto.hostdiff.OSChange.prototype.getOldname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.OSChange} returns this
 */
proto.hostdiff.OSChange.prototype.setOldname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string newname = 2;
 * @return {string}
 */
proto.hostdiff.OSChange.prototype.getNewname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hostdiff.OSChange} returns this
 */
proto.hostdiff.OSChange.prototype.setNewname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hostdiff.CompareSnapshotsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hostdiff.CompareSnapshotsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hostdiff.CompareSnapshotsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.CompareSnapshotsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
report: (f = msg.getReport()) && proto.hostdiff.DiffReport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hostdiff.CompareSnapshotsResponse}
 */
proto.hostdiff.CompareSnapshotsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hostdiff.CompareSnapshotsResponse;
  return proto.hostdiff.CompareSnapshotsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hostdiff.CompareSnapshotsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hostdiff.CompareSnapshotsResponse}
 */
proto.hostdiff.CompareSnapshotsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hostdiff.DiffReport;
      reader.readMessage(value,proto.hostdiff.DiffReport.deserializeBinaryFromReader);
      msg.setReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hostdiff.CompareSnapshotsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hostdiff.CompareSnapshotsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hostdiff.CompareSnapshotsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hostdiff.CompareSnapshotsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReport();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hostdiff.DiffReport.serializeBinaryToWriter
    );
  }
};


/**
 * optional DiffReport report = 1;
 * @return {?proto.hostdiff.DiffReport}
 */
proto.hostdiff.CompareSnapshotsResponse.prototype.getReport = function() {
  return /** @type{?proto.hostdiff.DiffReport} */ (
    jspb.Message.getWrapperField(this, proto.hostdiff.DiffReport, 1));
};


/**
 * @param {?proto.hostdiff.DiffReport|undefined} value
 * @return {!proto.hostdiff.CompareSnapshotsResponse} returns this
*/
proto.hostdiff.CompareSnapshotsResponse.prototype.setReport = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hostdiff.CompareSnapshotsResponse} returns this
 */
proto.hostdiff.CompareSnapshotsResponse.prototype.clearReport = function() {
  return this.setReport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hostdiff.CompareSnapshotsResponse.prototype.hasReport = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.hostdiff);
